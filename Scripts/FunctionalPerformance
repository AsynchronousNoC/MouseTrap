#procedure per la robustezza
proc FixBell {cell fileDescriptor} {
	#questo comando recupera la posizione BEL della cella
	set BEL_property [get_property BEL [get_cells $cell]]
	#questo comando formatta il comando affinchè nel costraint file la posizione BELL sia bloccata
	set line [subst {set_property BEL $BEL_property \[get_cells $cell\] }];
	puts $fileDescriptor $line;
	}
	
proc FixLOC {cell fileDescriptor} {
	#questo comando recupera la posizione LOC della cella
	set LOC_property [get_property LOC [get_cells $cell]]
	#questo comando formatta il comando affinchè nel costraint file la posizione LOC sia bloccata
	set line [subst {set_property LOC $LOC_property \[get_cells $cell\] }];
	puts $fileDescriptor $line;
	}
	
proc FixNet {net fileDescriptor} {
	#questo comando recupera la NET route della NET
	set routes [get_property ROUTE $net];
	#questo comando formatta il comando affinchè nel costraint file la posizione della NET sia bloccata
	set line [subst {set_property FIXED_ROUTE {$routes} \[get_nets $net\] }];
	puts $fileDescriptor $line;
	}
	
proc MinTimeConstrain {Stage1 Stage2 fileDescriptor margine} {
	set TimingPaths [get_timing_paths -max_paths 100  -from [get_pins $Stage1/*.Data_latch/G] -to [get_pins $Stage2/*.Data_latch/D] -hold]
	set ack_path [get_timing_paths -from [get_pins $Stage2/req_latch/G] -to [get_pins $Stage1/req_latch/GE] -hold]
	set closurePathsData [get_timing_paths -max_paths 100  -from [get_pins $Stage1/req_latch/G] -to [get_pins $Stage1/*.Data_latch/GE] -hold]
	set closurePathsReq [get_timing_paths -max_paths 100  -from [get_pins $Stage1/req_latch/G] -to [get_pins $Stage1/req_latch/GE] -hold]
	#Ricavo i dati di timing dopo l'ottimizzazione
	#si ottiene un tempo in nanosecondi
	set max_Bundled [get_property -max DATAPATH_DELAY $TimingPaths]
	set max_enable [get_property -max DATAPATH_DELAY $closurePathsData]
	set min_enable [get_property -max DATAPATH_DELAY $closurePathsReq]
	
	set min_Bundled [expr $margine*($max_Bundled + $max_enable-$min_enable)]
	
	puts $fileDescriptor [subst "#---------------Set min delay for data latch from $Stage1 to $Stage2"]
	#usando i doppi apici non mi funziona l'escape del carattere
	#se non si dichiarano gli endpoint con get_pins ma con get_cells prende quelli sbagliati e questo porta a path segmentation-> alcuni vincoli vengono eliminati
	#se non si dichiara lo start point con Q, e quindi non si fa il path segmentation non riesce a convergere
	puts $fileDescriptor [subst {set_min_delay -from \[get_pins $Stage1/req_latch/G\] -to \[get_pins $Stage2/req_latch/D\] $min_Bundled}]
	
	#Devo fissare tutte le  net e le celle appartenenti al cammino dei dati una volta che questi sono ottimizzati
	puts $fileDescriptor [subst "\n\n#Fix Data_latch nets from $Stage1 to $Stage2"]
	foreach TimingPath $TimingPaths {
		foreach cell [get_cells -of_objects $TimingPath] {FixBell $cell $fileDescriptor;FixLOC $cell $fileDescriptor;}
		foreach net [get_nets -of_objects $TimingPath] {FixNet $net $fileDescriptor}
		#rimangono fuori il lock dei PIN che va fatto nel caso di LUT-> come implementarlo? con un if sul foreach cell?
		puts $fileDescriptor "\n"
	}
	
	set ack_path [get_timing_paths -from [get_pins $Stage2/req_latch/Q] -to [get_pins $Stage1/req_latch/GE]]
	set closurePathsData [get_timing_paths -max_paths 100  -from [get_pins $Stage1/req_latch/G] -to [get_pins $Stage1/*.Data_latch/GE]]
	set closurePathsReq [get_timing_paths -max_paths 100  -from [get_pins $Stage1/req_latch/G] -to [get_pins $Stage1/req_latch/GE]]
	
	#se fisso i path poi il router non riesce a funzionare
	puts $fileDescriptor [subst {set_max_delay -from \[get_pins $Stage2/req_latch/G\] -to \[get_pins $Stage1/req_latch/GE\] [get_property -max DATAPATH_DELAY $ack_path]}]
	puts $fileDescriptor [subst {set_max_delay -from \[get_pins $Stage1/req_latch/G\] -to \[get_pins $Stage1/req_latch/GE\] [get_property -max DATAPATH_DELAY $closurePathsReq]}]
	puts $fileDescriptor [subst {set_max_delay -from \[get_pins $Stage1/req_latch/G\] -to \[get_pins $Stage1/*.Data_latch/GE\] [get_property -max DATAPATH_DELAY $closurePathsData]}]
}

#---------------MAIN----------------#
#Global variables
	set Mousetrap_name "mousetrap_ldce"
	set Maximum_tries 10
	set margine 1.1


	open_run impl_1
	set Pipelines [get_cells -hierarchical -filter [subst {ORIG_REF_NAME== $Mousetrap_name || REF_NAME== $Mousetrap_name}]]
	set f [open Temp.xdc w+] 
	#c'è un modo più intelligente di fare n^2 confronti boh forse
	foreach cell $Pipelines {
		foreach cellInter $Pipelines {
			set Coppia [get_timing_paths -from [get_cells $cell/*.Data_latch] -to [get_cells $cellInter/*.Data_latch] -quiet]
			if {$Coppia != ""} {
				MinTimeConstrain $cell $cellInter $f $margine
			}
		}
	}
	#chiudo il file e lo muovo nel constraint che uso
	close $f
	exec mv Temp.xdc ./Sources/Constraints/BundledConstraints.xdc
