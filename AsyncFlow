#procedura per l'ottimizzazione
proc MaxTimeConstrain {Stage1 Stage2 fileDescriptor} {
	puts $fileDescriptor [subst "\n\n#Puts max_delay constrain from $Stage1 to $Stage2"]
	#usando i doppi apici non mi funziona l'escape del carattere
	#se non si dichiarano gli endpoint con get_pins ma con get_cells prende quelli sbagliati e questo porta a path segmentation-> alcuni vincoli vengono eliminati
	puts $fileDescriptor [subst {set_max_delay -from \[get_pins $Stage1/*.Data_latch/G\] -to \[get_pins $Stage2/*.Data_latch/D\] 0.000}]
	puts $fileDescriptor [subst {set_max_delay -from \[get_pins $Stage1/req_latch/G\] -to \[get_pins $Stage2/req_latch/D\] 0.000}]
	puts $fileDescriptor "\n\n"
}

#procedure per la robustezza
proc FixBell {cell fileDescriptor} {
	#questo comando recupera la posizione BEL della cella
	set BEL_property [get_property BEL [get_cells $cell]]
	#questo comando formatta il comando affinchè nel costraint file la posizione BELL sia bloccata
	set line [subst {set_property BEL $BEL_property \[get_cells $cell\] }];
	puts $fileDescriptor $line;
	}
	
proc FixLOC {cell fileDescriptor} {
	#questo comando recupera la posizione LOC della cella
	set LOC_property [get_property LOC [get_cells $cell]]
	#questo comando formatta il comando affinchè nel costraint file la posizione LOC sia bloccata
	set line [subst {set_property LOC $LOC_property \[get_cells $cell\] }];
	puts $fileDescriptor $line;
	}
	
proc FixNet {net fileDescriptor} {
	#questo comando recupera la NET route della NET
	set routes [get_property ROUTE $net];
	#questo comando formatta il comando affinchè nel costraint file la posizione della NET sia bloccata
	set line [subst {set_property FIXED_ROUTE {$routes} \[get_nets $net\] }];
	puts $fileDescriptor $line;
	}
	
proc MinTimeConstrain {Stage1 Stage2 fileDescriptor} {
	set TimingPaths [get_timing_paths -max_paths 100 -from [get_cells $Stage1/*.Data_latch] -to [get_cells $Stage2/*.Data_latch]]
	#Ricavo i dati di timing dopo l'ottimizzazione
	#si ottiene un tempo in nanosecondi
	set max_Bundled [get_property -max DATAPATH_DELAY $TimingPaths]
	#non posso utilizzare get_timing_paths perchè latch/G non è un valid endpoint, tempo in picosecondi
	set max_enable [get_property -max SLOW_MAX [get_net_delays -of_objects [get_nets $Stage1/en] -to [get_pins $Stage1/*.Data_latch/G]]]
	set min_enable [get_property -max FAST_MIN [get_net_delays -of_objects [get_nets $Stage1/en] -to [get_pins $Stage1/req_latch/G]]]
	set margine 1.1
	set min_Bundled [expr $margine*($max_Bundled + ($max_enable-$min_enable)*1e-3)]
	
	puts $fileDescriptor [subst "#---------------Set min delay for data latch from $Stage1 to $Stage2"]
	#usando i doppi apici non mi funziona l'escape del carattere
	#se non si dichiarano gli endpoint con get_pins ma con get_cells prende quelli sbagliati e questo porta a path segmentation-> alcuni vincoli vengono eliminati
	puts $fileDescriptor [subst {set_min_delay -from \[get_pins $Stage1/req_latch/G\] -to \[get_pins $Stage2/req_latch/D\] $min_Bundled}]

	#Devo fissare tutte le  net e le celle appartenenti al cammino dei dati una volta che questi sono ottimizzati
	puts $fileDescriptor [subst "\n\n#Fix Data_latch nets from $Stage1 to $Stage2"]
		foreach TimingPath $TimingPaths {
			foreach cell [get_cells -of_objects $TimingPath] {FixBell $cell $fileDescriptor;FixLOC $cell $fileDescriptor;}
			foreach net [get_nets -of_objects $TimingPath] {FixNet $net $fileDescriptor}
			#rimangono fuori il lock dei PIN che va fatto nel caso di LUT-> come implementarlo? con un if sul foreach cell?
			puts $fileDescriptor "\n"
		}
	puts $fileDescriptor "\n\n"
}

	


set Mousetrap_name "mousetrap_ldce"
#---------run synthesis


#set_property is_enabled true [get_files  BundledConstraints.xdc]
#---------Ottimizzazione

	#---------Preparazione Constraint File
	#set f [open Temp.xdc w+] 
	#foreach cell $Pipelines {
	#	foreach cellInter $Pipelines {
	#		set Coppia [get_timing_paths -from [get_cells $cell/*.Data_latch] -to [get_cells $cellInter/*.Data_latch] -quiet]
	#		if {$Coppia != ""} {
	#			MaxTimeConstrain $cell $cellInter $f
	#		}
	#	}
	#}
	#close $f
	#exec mv Temp.xdc ./Sources/Constraints/BundledConstraints.xdc



	#---------Loop Implementativo
	#set_property AUTO_INCREMENTAL_CHECKPOINT 1 [get_runs impl_1]
	#set_property AUTO_INCREMENTAL_CHECKPOINT.DIRECTORY /home/giuseppe/Desktop/TESI/MouseTrap/project_moustrap/project_moustrap.srcs/utils_1/imports/impl_1 [get_runs impl_1]
	#set_property incremental_checkpoint.directive RuntimeOptimized [get_runs impl_1]

	#come gestire il loop per capire quando è finita l'ottimizzazione?


#---------Robustezza


	#---------Preparazione Constrain File
	open_run impl_1
	set f [open Temp.xdc w+] 
	#prima implementazione senza constrained?
	set Pipelines [get_cells -hierarchical -filter {ORIG_REF_NAME=="mousetrap_ldce" || REF_NAME=="mousetrap_ldce"}]
	#c'è un modo più intelligente di fare n^2 confronti boh forse
	foreach cell $Pipelines {
		foreach cellInter $Pipelines {
			set Coppia [get_timing_paths -from [get_cells $cell/*.Data_latch] -to [get_cells $cellInter/*.Data_latch] -quiet]
			if {$Coppia != ""} {
				MinTimeConstrain $cell $cellInter $f
			}
		}
	}

	#chiudo il file e lo muovo nel constraint che uso
	close $f
	exec mv Temp.xdc ./Sources/Constraints/BundledConstraints.xdc
	
#---------Implementazione per rendere corretto il funzionamento
#come gestisco il loop per capire quando funziona
#set_property is_enabled false [get_files  BundledConstraints.xdc]


