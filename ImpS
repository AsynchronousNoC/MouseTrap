#method to get positions from cells
proc getAbsRLOC {cell} {
	set site [get_sites -of [get_cells $cell]] 
	set X [get_property RPM_X $site]
	set Y [get_property RPM_Y $site] 
	return "X${X}Y${Y}"
	}
	
set WIDTH 32


#prepareCodeToRunWithout RLOC
set f [open ./Sources/Design/TopModule.sv r]
set file_data [read $f]
close $f
set f [open Temp.sv w+] 
set data [split $file_data "\n"]
foreach line $data {
	if { [regexp -all "mousetrap_ldce" $line] } { 
		regsub -all "mousetrap_ldce" $line "mousetrap_ldce_woMacros" line
	} elseif { [regexp -all "parameter WORD_WIDTH" $line] } {
		set line [subst "parameter WORD_WIDTH=$WIDTH"]
	}
		puts $f $line
}
close $f
exec mv Temp.sv ./Sources/Design/TopModule.sv

#run implementation with pblock
set_property is_enabled true [get_files  DefineImplConstraints.xdc]
reset_run synth_1
launch_runs impl_1 -jobs 6
wait_on_run impl_1
set_property is_enabled false [get_files  DefineImplConstraints.xdc]

#write back file with RLOX
set f [open Temp.sv w+] 
foreach line $data {
	if { [regexp -all "parameter WORD_WIDTH" $line] } {
		set line [subst "\t\t\tparameter WORD_WIDTH=$WIDTH"]
	}
		puts $f $line
}
close $f
exec mv Temp.sv ./Sources/Design/TopModule.sv

#get implementation positions
#dataLath positions
open_run impl_1
set Datalatch  [subst "  WIDTH=='d$WIDTH ?  {\""];append Datalatch [getAbsRLOC [lindex [get_cells FirstStage/*.Data_latch] 0]]; append Datalatch "\""
for {set x 1} {$x<$WIDTH} {incr x} {append Datalatch ",\"";append Datalatch [getAbsRLOC [lindex [get_cells FirstStage/*.Data_latch] $x]];append Datalatch  "\""}
append Datalatch "} :";append Datalatch  [subst "////$WIDTH Bit DataCellAddress"]

#reqLath positions
set ReqLatch  [subst "  WIDTH=='d$WIDTH ?\""];append ReqLatch [getAbsRLOC [lindex [get_cells FirstStage/req_latch] 0]]; append ReqLatch "\" :";;append ReqLatch  [subst "////$WIDTH Bit ReqCellAddress"]

#LUT position
set ReqLut  [subst "  WIDTH=='d$WIDTH ?\""];append ReqLut [getAbsRLOC [lindex [get_cells FirstStage/ReqXor] 0]]; append ReqLut "\" :";;append ReqLut  [subst "////$WIDTH Bit ReqXorAddress"]

#write new positions to file
set f [open ./Sources/Design/Mousetrap.sv r]
set file_data [read $f]
close $f
set f [open Temp.sv w+] 
set data [split $file_data "\n"]
foreach line $data {
	if { [regexp -all [subst "$WIDTH Bit DataCellAddress"] $line] } { 
		puts $f $Datalatch
	} elseif { [regexp -all [subst "$WIDTH Bit ReqCellAddress"] $line] } {
		puts $f $ReqLatch
	} elseif { [regexp -all [subst "$WIDTH Bit ReqXorAddress"] $line] } {
		puts $f $ReqLut
	} else {
		puts $f $line
	}
}
close $f
exec mv Temp.sv ./Sources/Design/Mousetrap.sv


#lunch new implementation with new positions
reset_run synth_1
launch_runs impl_1 -jobs 6
wait_on_run impl_1

